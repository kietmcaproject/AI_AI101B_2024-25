import heapq


goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

def find_zero(board):

    for i in range(3):
        for j in range(3):
            if board[i][j] == 0:
                return i, j

def get_neighbors(x, y):

    moves = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]
    return [(nx, ny) for nx, ny in moves if 0 <= nx < 3 and 0 <= ny < 3]

def swap_tiles(board, pos1, pos2):

    new_board = [row[:] for row in board]
    x1, y1 = pos1
    x2, y2 = pos2
    new_board[x1][y1], new_board[x2][y2] = new_board[x2][y2], new_board[x1][y1]
    return new_board

def heuristic(board):

    distance = 0
    for i in range(3):
        for j in range(3):
            if board[i][j] == 0:
                continue
            goal_x, goal_y = divmod(board[i][j] - 1, 3)
            distance += abs(goal_x - i) + abs(goal_y - j)
    return distance

def a_star_solve(board):

    queue = []
    heapq.heappush(queue, (heuristic(board), board, []))
    visited = set()

    while queue:
        _, state, path = heapq.heappop(queue)

        if state == goal_state:
            return path

        zero_pos = find_zero(state)
        for move in get_neighbors(*zero_pos):
            new_board = swap_tiles(state, zero_pos, move)
            board_tuple = tuple(map(tuple, new_board))

            if board_tuple not in visited:
                visited.add(board_tuple)
                heapq.heappush(queue, (heuristic(new_board) + len(path), new_board, path + [new_board]))

    return []

def get_user_board():

    print("🔢 Enter the 8-puzzle board row by row (use 0 for the empty tile).")
    board = []
    for i in range(3):
        row = input(f"Enter row {i+1} (space-separated numbers 0-8): ")
        board.append(list(map(int, row.split())))
    return board

initial_board = get_user_board()

print("\n🔢 Initial Board:")
for row in initial_board:
    print(row)


solution_steps = a_star_solve(initial_board)


if solution_steps:
    print("\n✅ Solution Found! Steps:")
    for step_num, step in enumerate(solution_steps, 1):
        print(f"\nStep {step_num}:")
        for row in step:
            print(row)
else:
    print("\n❌ No solution found!")